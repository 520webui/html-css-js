一. 为什么要清除浮动

给元素设置了float属性之后，元素就会脱离文档流，这样就会引起排版的混乱。

元素脱离文档流的结果：

元素从普通布局排版中拿走，其他盒子在定位的时候，会把脱离文档流的元素当做不存在来进行定位,即忽略已经浮动的元素。

eg:

<div class="outer">
    <div class="div1">1</div>
</div>

.outer{border: 1px solid #ccc;background: #fc9;color: #fff; margin: 50px auto;padding: 50px;}
.div1{width: 80px;height: 80px;background: red;float: left;}

如上例所示，如果子元素不浮动的话，那么这个外层的高是会自动被撑开的。但是当内层元素浮动后，就出现了以下影响：

背景不能显示
边框不能撑开
margin 设置值不能正确显示


二. 清除浮动的方法

1. 在浮动的元素下面加一个空的<div>，设置clear:both;属性

这也是最常使用的一种方法，在父元素中插入一个子元素，并排列在最后一个子元素，但是这种方法有一个缺点就是，会增加一个多余的DOM节点。

（原理是父容器现在必须考虑非浮动子元素的位置，而后者肯定出现在浮动元素下方，所以显示出来，父容器就把所有子元素都包括进去了。
这种方法比较简单，但是要在页面中增加冗余标签，违背了语义网的原则。）

<div class="outer">
    <div class="div1">1</div>
    <div class="div2">2</div>
    <div class="div3">3</div>
    <div class="clear"></div>
</div>

.clear{clear:both; height: 0; line-height: 0; font-size: 0}
插播clear属性：

clear:left; /* 元素左边不允许有浮动的元素 */

clear:right; /* 元素右边不允许有浮动元素*/

2. 父元素定义 overflow：hidden；zoom:1;

不能定义height，使用overflow:hidden;时，浏览器会自动检查浮动区的位置。（它的思路是让父容器变得可以自动"清理"（clearing）子元素的浮动，
从而能够识别出浮动子元素的位置，不会出现显示上的差错。
要做到这点，只要为父容器加上一条"overflow: hidden"的CSS语句就行了）

<div class="outer">
    <div class="div1">1</div>
    <div class="div2">2</div>
    <div class="div3">3</div>
</div>

.outer{overflow:hidden;zoom:1;}

与这个类似的一个方法是：

父元素定义 overflow:auto;zoom:1; —— 这里是利用元素的BFC特性

注意：这里的zoom:1;是用来解决浏览器的兼容性。

3. 给父元素加一个:after{clear:both;}

.outer:after {
    clear:both;//清除浮动
    content:'';
    display:block;//这个属性是必须的
    visibility:hidden;//允许浏览器渲染，但是不显示出来
}

插播一个visibility:hidden;和display:none;的区别：

visibility:none; **在页面中**看不见摸得着，页面中会留出空间，只是不可见

display:none; **在页面中**看不见摸不着，存在dom节点，但是在页面中没有这个对象。

:after指的是在该标签里面的所有元素之后，添加内容（而不是标签之后！！！注意）
:before指的是在该标签里面的所有元素之前，添加内容

4. 给父元素加一个高度

解决父元素无法自动获取高度的问题

但是这种方法使用太局限了，不建议使用

5. 父元素也一起浮动

不建议使用

6.父元素定义display:table

不建议使用

7.使用after伪类清除浮动带来的影响的时候，通常都这么写：


/* slightly enhanced, universal clearfix hack */
.clearfix:after {
     visibility: hidden;
     display: block;
     font-size: 0;
     content: " ";
     clear: both;
     height: 0;
     }
.clearfix { display: inline-block; }
/* start commented backslash hack \*/
* html .clearfix { height: 1%; }
.clearfix { display: block; }
/* close commented backslash hack */
  
第七点的原文链接：
https://perishablepress.com/lessons-learned-concerning-the-clearfix-css-hack/



---------------------------------------------------------------------------------------------------------------------------------
2017.10.14参阅阮一峰博文   http://www.ruanyifeng.com/blog/2009/04/float_clearing.html

浮动元素容器的clearing问题


1. 问题的由来

有这样一种情形：在一个容器（container）中，有两个浮动的子元素，如图一。

（图一 设计视图是一个父容器中含有二个浮动的子元素）
请问HTML代码应该怎么写？
很简单啦，几行字就够了。
<div>
<div style="float:left;width:45%;"></div>
<div style="float:right;width:45%;"></div>
</div>
上面的代码完全正确，但是如果在浏览器中一运行，就会出现意想不到的结果。

（图二 实际视图是子元素显示在父容器的外部）
两者好像脱离了关系一样，怎么会这样？

2. 问题的原因

其实，原因很简单，与浮动定位有关。
在CSS规范中，浮动定位不属于正常的页面流（page flow），是独立定位的。所以，只含有浮动元素的父容器，在显示时不考虑子元素的位置，
就当它们不存在一样。这就造成了显示出来，父容器好像空容器一样。

3. 解决方法一：添加空元素

经典的解决方法，就是在浮动元素下方添加一个非浮动元素，就像图三。

（图三 在父容器底部添加一个非浮动元素）
代码这样写：
<div>
<div style="float:left;width:45%;"></div>
<div style="float:right;width:45%;"></div>
<div style="clear:both;"></div>
</div>
这样一来，就没问题，能够正常显示了。原理是父容器现在必须考虑非浮动子元素的位置，而后者肯定出现在浮动元素下方，所以显示出来，
父容器就把所有子元素都包括进去了。
这种方法比较简单，但是要在页面中增加冗余标签，违背了语义网的原则。那么，有没有不修改HTML代码的方法呢？

4. 解决方法二：浮动的父容器

另一种思路是，索性将父容器也改成浮动定位，这样它就可以带着子元素一起浮动了。
代码这样写：
<div style="float:left;">
<div style="float:left;width:45%;"></div>
<div style="float:right;width:45%;"></div>
</div>
这种方法不用修改HTML代码，但是缺点在于父容器变成浮动以后，会影响到后面元素的定位，而且有时候，父容器是定位死的，无法变成浮动。

5. 解决方法三：浮动元素的自动clearing

它的思路是让父容器变得可以自动"清理"（clearing）子元素的浮动，从而能够识别出浮动子元素的位置，不会出现显示上的差错。
要做到这点，只要为父容器加上一条"overflow: hidden"的CSS语句就行了。代码这样写：
<div style="overflow: hidden;">
<div style="float:left;width:45%;"></div>
<div style="float:right;width:45%;"></div>
</div>
这种方法的缺点主要有二个，一个是IE 6不支持，另一个是一旦子元素的大小超过父容器的大小，就会出显示问题。

6. 解决方法四

还是回到方法一，能不能通过CSS语句添加子元素呢，这样就不用修改HTML代码了？
回答是可以的，我们知道CSS语句中有一个:after伪选择符，就可以在父容器的尾部自动创建一个子元素，这正好符合我们的需要。
下面的代码参照了lifesinger的写法：
.clearfix:after {
content: "\0020";
display: block;
height: 0;
clear: both;
}

其中的"clearfix"是父容器的class名称，"content:"020";"是在父容器的结尾处放一个空白字符，"height: 0;"是让这个这个空白字符不显示出来，
"display: block; clear: both;"是确保这个空白字符是非浮动的独立区块。
但是，:after选择符IE 6不支持，也就是说上面的这段代码在IE 6中无效，这怎么办？
我们添加一条IE 6的独有命令"zoom:1;"就行了，这条命令的作用是激活父元素的"hasLayout"属性，让父元素拥有自己的布局。（它的具体含义，
请参见本文的附录。）IE 6会读取这条命令，其他浏览器则会直接忽略它。

7. 最后的生产代码

.clearfix:after {
content: "\0020";
display: block;
height: 0;
clear: both;
}
.clearfix {
zoom: 1;
}


更新 2011.04.21
Nicolas Gallagher贴出了更通用的生产代码。
/* For modern browsers */
.cf:before,
.cf:after {
　　content:"";
　　display:block;
}
.cf:after {
　　clear:both;
}
/* For IE 6/7 (trigger hasLayout) */
.cf {
　　zoom:1;
}
.clear{clear:both; height: 0; line-height: 0; font-size: 0}
